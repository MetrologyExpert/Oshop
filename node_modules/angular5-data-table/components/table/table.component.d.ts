import { AfterContentInit, EventEmitter, OnDestroy, OnInit, QueryList, TemplateRef } from '@angular/core';
import { DataTableColumnDirective } from '../../directives/column/column.directive';
import { DataTableRowComponent } from '../row/row.component';
import { DataTableParams } from '../../types/data-table-params.type';
import { RowCallback } from '../../types/row-callback.type';
import { DataTableTranslations } from '../../types/data-table-translations.type';
import { Subject } from 'rxjs/Subject';
import { Subscription } from 'rxjs/Subscription';
import 'rxjs/add/operator/debounceTime';
import 'rxjs/add/operator/do';
import * as ɵngcc0 from '@angular/core';
export declare class DataTableComponent implements DataTableParams, OnInit, AfterContentInit, OnDestroy {
    private _items;
    private _itemCount;
    items: any[];
    itemCount: number;
    columns: QueryList<DataTableColumnDirective>;
    rows: QueryList<DataTableRowComponent>;
    expandTemplate: TemplateRef<any>;
    title: string;
    showTitle: boolean;
    header: boolean;
    pagination: boolean;
    indexColumn: boolean;
    indexColumnHeader: string;
    rowColors: RowCallback;
    rowTooltip: RowCallback;
    selectColumn: boolean;
    multiSelect: boolean;
    substituteRows: boolean;
    expandableRows: boolean;
    labels: DataTableTranslations;
    selectOnRowClick: boolean;
    autoReload: boolean;
    showReloading: boolean;
    noDataMessage: string;
    pageLimits: number[];
    primaryColumn: string;
    reload: EventEmitter<{}>;
    rowClick: EventEmitter<{}>;
    rowDoubleClick: EventEmitter<{}>;
    headerClick: EventEmitter<{}>;
    cellClick: EventEmitter<{}>;
    indexColumnVisible: boolean;
    selectColumnVisible: boolean;
    expandColumnVisible: boolean;
    reloadNotification: string;
    paginationNotification: string;
    sortNotification: string;
    columnSelectorNotification: string;
    _displayParams: DataTableParams;
    subject: Subject<void>;
    subject$: Subscription;
    notifier: Subject<void>;
    notifier$: Subscription;
    selectedRow: DataTableRowComponent;
    selectedRows: DataTableRowComponent[];
    Math: any;
    id: string;
    private _selectAllCheckbox;
    private _resizeInProgress;
    resizeLimit: number;
    _reloading: boolean;
    reloading: boolean;
    private _sortBy;
    sortBy: string;
    private _sortAsc;
    sortAsc: boolean;
    private _offset;
    offset: number;
    private _limit;
    limit: number;
    page: number;
    readonly lastPage: number;
    sort(sortBy: string, asc: boolean): void;
    ngOnInit(): void;
    private _initDefaultValues();
    private _initDefaultClickEvents();
    reloadItems(): void;
    private _onReloadFinished();
    readonly displayParams: DataTableParams;
    _updateDisplayParams(): void;
    constructor();
    rowClicked(row: DataTableRowComponent, event: Event): void;
    rowDoubleClicked(row: DataTableRowComponent, event: Event): void;
    headerClicked(column: DataTableColumnDirective, event: Event): void;
    private cellClicked(column, row, event);
    private _getRemoteParameters();
    private sortColumn(column);
    readonly columnCount: number;
    getRowColor(item: any, index: number, row: DataTableRowComponent): string;
    selectAllCheckbox: boolean;
    private _onSelectAllChanged(value);
    onRowSelectChanged(row: DataTableRowComponent): void;
    readonly substituteItems: {}[];
    private resizeColumnStart(event, column, columnElement);
    private _isResizeInLimit(columnElement, dx);
    ngAfterContentInit(): void;
    _notify(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DataTableComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DataTableComponent, "data-table", never, { "title": "title"; "showTitle": "showTitle"; "header": "header"; "pagination": "pagination"; "indexColumn": "indexColumn"; "indexColumnHeader": "indexColumnHeader"; "selectColumn": "selectColumn"; "multiSelect": "multiSelect"; "substituteRows": "substituteRows"; "expandableRows": "expandableRows"; "selectOnRowClick": "selectOnRowClick"; "autoReload": "autoReload"; "showReloading": "showReloading"; "pageLimits": "pageLimits"; "primaryColumn": "primaryColumn"; "items": "items"; "itemCount": "itemCount"; "sortBy": "sortBy"; "sortAsc": "sortAsc"; "offset": "offset"; "limit": "limit"; "page": "page"; "labels": "labels"; "rowColors": "rowColors"; "rowTooltip": "rowTooltip"; "noDataMessage": "noDataMessage"; }, { "reload": "reload"; "rowClick": "rowClick"; "rowDoubleClick": "rowDoubleClick"; "headerClick": "headerClick"; "cellClick": "cellClick"; }, ["expandTemplate", "columns"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRhYmxlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIE9uSW5pdCwgUXVlcnlMaXN0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhVGFibGVDb2x1bW5EaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzL2NvbHVtbi9jb2x1bW4uZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgRGF0YVRhYmxlUm93Q29tcG9uZW50IH0gZnJvbSAnLi4vcm93L3Jvdy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBEYXRhVGFibGVQYXJhbXMgfSBmcm9tICcuLi8uLi90eXBlcy9kYXRhLXRhYmxlLXBhcmFtcy50eXBlJztcclxuaW1wb3J0IHsgUm93Q2FsbGJhY2sgfSBmcm9tICcuLi8uLi90eXBlcy9yb3ctY2FsbGJhY2sudHlwZSc7XHJcbmltcG9ydCB7IERhdGFUYWJsZVRyYW5zbGF0aW9ucyB9IGZyb20gJy4uLy4uL3R5cGVzL2RhdGEtdGFibGUtdHJhbnNsYXRpb25zLnR5cGUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcy9TdWJqZWN0JztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcy9TdWJzY3JpcHRpb24nO1xyXG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL2RlYm91bmNlVGltZSc7XHJcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvZG8nO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEYXRhVGFibGVDb21wb25lbnQgaW1wbGVtZW50cyBEYXRhVGFibGVQYXJhbXMsIE9uSW5pdCwgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcclxuICAgIHByaXZhdGUgX2l0ZW1zO1xyXG4gICAgcHJpdmF0ZSBfaXRlbUNvdW50O1xyXG4gICAgaXRlbXM6IGFueVtdO1xyXG4gICAgaXRlbUNvdW50OiBudW1iZXI7XHJcbiAgICBjb2x1bW5zOiBRdWVyeUxpc3Q8RGF0YVRhYmxlQ29sdW1uRGlyZWN0aXZlPjtcclxuICAgIHJvd3M6IFF1ZXJ5TGlzdDxEYXRhVGFibGVSb3dDb21wb25lbnQ+O1xyXG4gICAgZXhwYW5kVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XHJcbiAgICB0aXRsZTogc3RyaW5nO1xyXG4gICAgc2hvd1RpdGxlOiBib29sZWFuO1xyXG4gICAgaGVhZGVyOiBib29sZWFuO1xyXG4gICAgcGFnaW5hdGlvbjogYm9vbGVhbjtcclxuICAgIGluZGV4Q29sdW1uOiBib29sZWFuO1xyXG4gICAgaW5kZXhDb2x1bW5IZWFkZXI6IHN0cmluZztcclxuICAgIHJvd0NvbG9yczogUm93Q2FsbGJhY2s7XHJcbiAgICByb3dUb29sdGlwOiBSb3dDYWxsYmFjaztcclxuICAgIHNlbGVjdENvbHVtbjogYm9vbGVhbjtcclxuICAgIG11bHRpU2VsZWN0OiBib29sZWFuO1xyXG4gICAgc3Vic3RpdHV0ZVJvd3M6IGJvb2xlYW47XHJcbiAgICBleHBhbmRhYmxlUm93czogYm9vbGVhbjtcclxuICAgIGxhYmVsczogRGF0YVRhYmxlVHJhbnNsYXRpb25zO1xyXG4gICAgc2VsZWN0T25Sb3dDbGljazogYm9vbGVhbjtcclxuICAgIGF1dG9SZWxvYWQ6IGJvb2xlYW47XHJcbiAgICBzaG93UmVsb2FkaW5nOiBib29sZWFuO1xyXG4gICAgbm9EYXRhTWVzc2FnZTogc3RyaW5nO1xyXG4gICAgcGFnZUxpbWl0czogbnVtYmVyW107XHJcbiAgICBwcmltYXJ5Q29sdW1uOiBzdHJpbmc7XHJcbiAgICByZWxvYWQ6IEV2ZW50RW1pdHRlcjx7fT47XHJcbiAgICByb3dDbGljazogRXZlbnRFbWl0dGVyPHt9PjtcclxuICAgIHJvd0RvdWJsZUNsaWNrOiBFdmVudEVtaXR0ZXI8e30+O1xyXG4gICAgaGVhZGVyQ2xpY2s6IEV2ZW50RW1pdHRlcjx7fT47XHJcbiAgICBjZWxsQ2xpY2s6IEV2ZW50RW1pdHRlcjx7fT47XHJcbiAgICBpbmRleENvbHVtblZpc2libGU6IGJvb2xlYW47XHJcbiAgICBzZWxlY3RDb2x1bW5WaXNpYmxlOiBib29sZWFuO1xyXG4gICAgZXhwYW5kQ29sdW1uVmlzaWJsZTogYm9vbGVhbjtcclxuICAgIHJlbG9hZE5vdGlmaWNhdGlvbjogc3RyaW5nO1xyXG4gICAgcGFnaW5hdGlvbk5vdGlmaWNhdGlvbjogc3RyaW5nO1xyXG4gICAgc29ydE5vdGlmaWNhdGlvbjogc3RyaW5nO1xyXG4gICAgY29sdW1uU2VsZWN0b3JOb3RpZmljYXRpb246IHN0cmluZztcclxuICAgIF9kaXNwbGF5UGFyYW1zOiBEYXRhVGFibGVQYXJhbXM7XHJcbiAgICBzdWJqZWN0OiBTdWJqZWN0PHZvaWQ+O1xyXG4gICAgc3ViamVjdCQ6IFN1YnNjcmlwdGlvbjtcclxuICAgIG5vdGlmaWVyOiBTdWJqZWN0PHZvaWQ+O1xyXG4gICAgbm90aWZpZXIkOiBTdWJzY3JpcHRpb247XHJcbiAgICBzZWxlY3RlZFJvdzogRGF0YVRhYmxlUm93Q29tcG9uZW50O1xyXG4gICAgc2VsZWN0ZWRSb3dzOiBEYXRhVGFibGVSb3dDb21wb25lbnRbXTtcclxuICAgIE1hdGg6IGFueTtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIF9zZWxlY3RBbGxDaGVja2JveDtcclxuICAgIHByaXZhdGUgX3Jlc2l6ZUluUHJvZ3Jlc3M7XHJcbiAgICByZXNpemVMaW1pdDogbnVtYmVyO1xyXG4gICAgX3JlbG9hZGluZzogYm9vbGVhbjtcclxuICAgIHJlbG9hZGluZzogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgX3NvcnRCeTtcclxuICAgIHNvcnRCeTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfc29ydEFzYztcclxuICAgIHNvcnRBc2M6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIF9vZmZzZXQ7XHJcbiAgICBvZmZzZXQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX2xpbWl0O1xyXG4gICAgbGltaXQ6IG51bWJlcjtcclxuICAgIHBhZ2U6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxhc3RQYWdlOiBudW1iZXI7XHJcbiAgICBzb3J0KHNvcnRCeTogc3RyaW5nLCBhc2M6IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIHByaXZhdGUgX2luaXREZWZhdWx0VmFsdWVzKCk7XHJcbiAgICBwcml2YXRlIF9pbml0RGVmYXVsdENsaWNrRXZlbnRzKCk7XHJcbiAgICByZWxvYWRJdGVtcygpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBfb25SZWxvYWRGaW5pc2hlZCgpO1xyXG4gICAgcmVhZG9ubHkgZGlzcGxheVBhcmFtczogRGF0YVRhYmxlUGFyYW1zO1xyXG4gICAgX3VwZGF0ZURpc3BsYXlQYXJhbXMoKTogdm9pZDtcclxuICAgIGNvbnN0cnVjdG9yKCk7XHJcbiAgICByb3dDbGlja2VkKHJvdzogRGF0YVRhYmxlUm93Q29tcG9uZW50LCBldmVudDogRXZlbnQpOiB2b2lkO1xyXG4gICAgcm93RG91YmxlQ2xpY2tlZChyb3c6IERhdGFUYWJsZVJvd0NvbXBvbmVudCwgZXZlbnQ6IEV2ZW50KTogdm9pZDtcclxuICAgIGhlYWRlckNsaWNrZWQoY29sdW1uOiBEYXRhVGFibGVDb2x1bW5EaXJlY3RpdmUsIGV2ZW50OiBFdmVudCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIGNlbGxDbGlja2VkKGNvbHVtbiwgcm93LCBldmVudCk7XHJcbiAgICBwcml2YXRlIF9nZXRSZW1vdGVQYXJhbWV0ZXJzKCk7XHJcbiAgICBwcml2YXRlIHNvcnRDb2x1bW4oY29sdW1uKTtcclxuICAgIHJlYWRvbmx5IGNvbHVtbkNvdW50OiBudW1iZXI7XHJcbiAgICBnZXRSb3dDb2xvcihpdGVtOiBhbnksIGluZGV4OiBudW1iZXIsIHJvdzogRGF0YVRhYmxlUm93Q29tcG9uZW50KTogc3RyaW5nO1xyXG4gICAgc2VsZWN0QWxsQ2hlY2tib3g6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIF9vblNlbGVjdEFsbENoYW5nZWQodmFsdWUpO1xyXG4gICAgb25Sb3dTZWxlY3RDaGFuZ2VkKHJvdzogRGF0YVRhYmxlUm93Q29tcG9uZW50KTogdm9pZDtcclxuICAgIHJlYWRvbmx5IHN1YnN0aXR1dGVJdGVtczoge31bXTtcclxuICAgIHByaXZhdGUgcmVzaXplQ29sdW1uU3RhcnQoZXZlbnQsIGNvbHVtbiwgY29sdW1uRWxlbWVudCk7XHJcbiAgICBwcml2YXRlIF9pc1Jlc2l6ZUluTGltaXQoY29sdW1uRWxlbWVudCwgZHgpO1xyXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XHJcbiAgICBfbm90aWZ5KCk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG59XHJcbiJdfQ==